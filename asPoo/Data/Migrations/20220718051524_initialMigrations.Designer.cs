// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220718051524_initialMigrations")]
    partial class initialMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AlunoMateria", b =>
                {
                    b.Property<int>("AlunosId")
                        .HasColumnType("integer");

                    b.Property<int>("MateriasId")
                        .HasColumnType("integer");

                    b.HasKey("AlunosId", "MateriasId");

                    b.HasIndex("MateriasId");

                    b.ToTable("AlunoMateria");
                });

            modelBuilder.Entity("Domain.Entities.Aluno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CursoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DtNascimento")
                        .HasColumnType("DATE")
                        .HasColumnName("dataNascimento");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<int>("NumeroMatricula")
                        .HasMaxLength(12)
                        .HasColumnType("INT")
                        .HasColumnName("numeroMatricula");

                    b.Property<int?>("TurmaId")
                        .HasColumnType("integer");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("phone");

                    b.Property<string>("sobreNome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("sobreNome");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("TurmaId");

                    b.ToTable("ALuno", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartamentoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Duracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Curso", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Departamento", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoID")
                        .HasColumnType("integer");

                    b.Property<int>("CEP")
                        .HasMaxLength(15)
                        .HasColumnType("INT")
                        .HasColumnName("cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("cidade");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("complemento");

                    b.Property<int>("ProfesssorID")
                        .HasColumnType("integer");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("rua");

                    b.Property<int>("numCasa")
                        .HasMaxLength(5)
                        .HasColumnType("INT")
                        .HasColumnName("numCasa");

                    b.HasKey("Id");

                    b.HasIndex("AlunoID")
                        .IsUnique();

                    b.ToTable("Endereco", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Historico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoID")
                        .HasColumnType("integer");

                    b.Property<int>("MateriaID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PeriodoRealizacao")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AlunoID");

                    b.HasIndex("MateriaID");

                    b.ToTable("Historicos");
                });

            modelBuilder.Entity("Domain.Entities.Materia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CursoID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Duracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .HasColumnType("text");

                    b.Property<int>("ProfesssorID")
                        .HasColumnType("integer");

                    b.Property<int?>("professorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CursoID");

                    b.HasIndex("professorId");

                    b.ToTable("Materias");
                });

            modelBuilder.Entity("Domain.Entities.Notas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoID")
                        .HasColumnType("integer");

                    b.Property<int>("HistoricoID")
                        .HasColumnType("integer");

                    b.Property<int>("MateriaID")
                        .HasColumnType("integer");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("AlunoID");

                    b.HasIndex("HistoricoID");

                    b.HasIndex("MateriaID");

                    b.ToTable("Notas", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CursoID")
                        .HasColumnType("integer");

                    b.Property<int>("DepartamentoID")
                        .HasColumnType("integer");

                    b.Property<int>("EnderecoID")
                        .HasColumnType("integer");

                    b.Property<int?>("TurmasId")
                        .HasColumnType("integer");

                    b.Property<string>("cdgIndentificacao")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("cdgIndentificacao");

                    b.Property<string>("fone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("fone");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<string>("sobreNome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("sobreNome");

                    b.HasKey("Id");

                    b.HasIndex("CursoID");

                    b.HasIndex("DepartamentoID");

                    b.HasIndex("EnderecoID")
                        .IsUnique();

                    b.HasIndex("TurmasId");

                    b.ToTable("Professor", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Turma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CursoID")
                        .HasColumnType("integer");

                    b.Property<int>("Sala")
                        .HasMaxLength(10)
                        .HasColumnType("INT")
                        .HasColumnName("sala");

                    b.Property<int>("numeroTurma")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CursoID");

                    b.ToTable("Turma", (string)null);
                });

            modelBuilder.Entity("AlunoMateria", b =>
                {
                    b.HasOne("Domain.Entities.Aluno", null)
                        .WithMany()
                        .HasForeignKey("AlunosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Materia", null)
                        .WithMany()
                        .HasForeignKey("MateriasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Aluno", b =>
                {
                    b.HasOne("Domain.Entities.Curso", "Curso")
                        .WithMany("Alunos")
                        .HasForeignKey("CursoId");

                    b.HasOne("Domain.Entities.Turma", "Turma")
                        .WithMany("Alunos")
                        .HasForeignKey("TurmaId");

                    b.Navigation("Curso");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("Domain.Entities.Curso", b =>
                {
                    b.HasOne("Domain.Entities.Departamento", "Departamento")
                        .WithMany("cursos")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Departamento_Curso");

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Domain.Entities.Endereco", b =>
                {
                    b.HasOne("Domain.Entities.Aluno", "Alunos")
                        .WithOne("Endereco")
                        .HasForeignKey("Domain.Entities.Endereco", "AlunoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alunos");
                });

            modelBuilder.Entity("Domain.Entities.Historico", b =>
                {
                    b.HasOne("Domain.Entities.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Materia", "materia")
                        .WithMany()
                        .HasForeignKey("MateriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("materia");
                });

            modelBuilder.Entity("Domain.Entities.Materia", b =>
                {
                    b.HasOne("Domain.Entities.Curso", "curso")
                        .WithMany("Materias")
                        .HasForeignKey("CursoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Professor", "professor")
                        .WithMany("Materias")
                        .HasForeignKey("professorId");

                    b.Navigation("curso");

                    b.Navigation("professor");
                });

            modelBuilder.Entity("Domain.Entities.Notas", b =>
                {
                    b.HasOne("Domain.Entities.Aluno", "aluno")
                        .WithMany("Notas")
                        .HasForeignKey("AlunoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Historico", null)
                        .WithMany("Notas")
                        .HasForeignKey("HistoricoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Materia", "materia")
                        .WithMany("notas")
                        .HasForeignKey("MateriaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("aluno");

                    b.Navigation("materia");
                });

            modelBuilder.Entity("Domain.Entities.Professor", b =>
                {
                    b.HasOne("Domain.Entities.Curso", "Curso")
                        .WithMany("Professores")
                        .HasForeignKey("CursoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Departamento", "departamento")
                        .WithMany("professores")
                        .HasForeignKey("DepartamentoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Endereco", "Endereco")
                        .WithOne("Professores")
                        .HasForeignKey("Domain.Entities.Professor", "EnderecoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Turma", "Turmas")
                        .WithMany("Professor")
                        .HasForeignKey("TurmasId");

                    b.Navigation("Curso");

                    b.Navigation("Endereco");

                    b.Navigation("Turmas");

                    b.Navigation("departamento");
                });

            modelBuilder.Entity("Domain.Entities.Turma", b =>
                {
                    b.HasOne("Domain.Entities.Curso", "Curso")
                        .WithMany("Turmas")
                        .HasForeignKey("CursoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("Domain.Entities.Aluno", b =>
                {
                    b.Navigation("Endereco");

                    b.Navigation("Notas");
                });

            modelBuilder.Entity("Domain.Entities.Curso", b =>
                {
                    b.Navigation("Alunos");

                    b.Navigation("Materias");

                    b.Navigation("Professores");

                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("Domain.Entities.Departamento", b =>
                {
                    b.Navigation("cursos");

                    b.Navigation("professores");
                });

            modelBuilder.Entity("Domain.Entities.Endereco", b =>
                {
                    b.Navigation("Professores");
                });

            modelBuilder.Entity("Domain.Entities.Historico", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("Domain.Entities.Materia", b =>
                {
                    b.Navigation("notas");
                });

            modelBuilder.Entity("Domain.Entities.Professor", b =>
                {
                    b.Navigation("Materias");
                });

            modelBuilder.Entity("Domain.Entities.Turma", b =>
                {
                    b.Navigation("Alunos");

                    b.Navigation("Professor");
                });
#pragma warning restore 612, 618
        }
    }
}
